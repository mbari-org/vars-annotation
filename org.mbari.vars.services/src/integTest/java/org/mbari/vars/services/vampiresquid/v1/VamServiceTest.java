package org.mbari.vars.services.vampiresquid.v1;

import static org.junit.Assert.*;

import mbarix4j.net.URLUtilities;
import org.junit.Test;
import org.mbari.vars.services.AssertUtils;
import org.mbari.vars.services.MediaService;
import org.mbari.vars.services.TestToolbox;
import org.mbari.vars.services.TestUtils;
import org.mbari.vars.services.model.Media;

public class VamServiceTest {

    MediaService mediaService = TestToolbox.getServices().getMediaService();

    private Media createRandomMedia() {
        var media = TestUtils.buildRandomMedia();
        return mediaService.create(media).join();
    }

    @Test
    public void create() {
        var media = TestUtils.buildRandomMedia();
        // Note create will ignore any UUIDs that are set as those are generated by the database
        var obtained = mediaService.create(media).join();
        assertNotNull(obtained);
        AssertUtils.assertSameMedia(media, obtained, false);
    }

    @Test
    public void createWithExistingVideo() {
        var media = createRandomMedia();
        var twin = TestUtils.buildRandomMedia();
        twin.setVideoReferenceUuid(media.getVideoReferenceUuid());
        twin.setVideoSequenceName(media.getVideoSequenceName());
        twin.setVideoName(media.getVideoName());
        twin.setStartTimestamp(media.getStartTimestamp());
        twin.setDuration(media.getDuration());
        var obtained = mediaService.create(twin).join();
        assertNotNull(obtained);
        assertNotEquals(media.getVideoReferenceUuid(), obtained.getVideoReferenceUuid());
        assertEquals(media.getVideoSequenceName(), obtained.getVideoSequenceName());
        assertEquals(media.getVideoName(), obtained.getVideoName());
        assertEquals(media.getStartTimestamp(), obtained.getStartTimestamp());
        assertEquals(media.getDuration(), obtained.getDuration());
    }


    @Test
    public void update() {
        var media = createRandomMedia();
        var sample = TestUtils.buildRandomMedia();
        media.setAudioCodec(sample.getAudioCodec());
        media.setCameraId(sample.getCameraId());
        media.setContainer(sample.getContainer());
        media.setDuration(sample.getDuration());
        media.setSha512(sample.getSha512());
        media.setUri(sample.getUri());
//        media.setVideoSequenceName(sample.getVideoSequenceName());
//        media.setVideoName(sample.getVideoName());
        media.setVideoCodec(sample.getVideoCodec());
        media.setStartTimestamp(sample.getStartTimestamp());
        media.setFrameRate(sample.getFrameRate());
        media.setWidth(sample.getWidth());
        media.setHeight(sample.getHeight());
        media.setSizeBytes(sample.getSizeBytes());
        media.setDescription(sample.getDescription());
        media.setVideoDescription(sample.getVideoDescription());
        media.setVideoSequenceDescription(sample.getVideoSequenceDescription());
        var obtained = mediaService.update(media).join();
        AssertUtils.assertSameMedia(media, obtained, true);
    }


    @Test
    public void delete() {
        var media = createRandomMedia();
        var ok = mediaService.delete(media.getVideoReferenceUuid()).join();
        assertTrue(ok);
        var obtained = mediaService.findBySha512(media.getSha512()).join();
        assertNull(obtained);
    }

    @Test
    public void findByUuid() {
        var media = createRandomMedia();
        var obtained = mediaService.findByUuid(media.getVideoReferenceUuid()).join();
        assertNotNull(obtained);
        AssertUtils.assertSameMedia(media, obtained, true);
    }

    @Test
    public void findBySha512() {
        var media = createRandomMedia();
        var obtained = mediaService.findBySha512(media.getSha512()).join();
        assertNotNull(obtained);
        AssertUtils.assertSameMedia(media, obtained, true);
    }

    @Test
    public void findByUri() {
        // TODO: This test fails because the encoded URI gets decoded by the nginx proxy server.
        // A workaround is to not use a proxy server for vampire-squid
        var media = createRandomMedia();
        var obtained = mediaService.findByUri(media.getUri()).join();
        assertNotNull(obtained);
        AssertUtils.assertSameMedia(media, obtained, true);
    }

    @Test
    public void findByVideoSequenceName() {
        var media = createRandomMedia();
        var obtained = mediaService.findByVideoSequenceName(media.getVideoSequenceName()).join();
        assertNotNull(obtained);
        assertEquals(1, obtained.size());
        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findByVideoName() {
        var media = createRandomMedia();
        var obtained = mediaService.findByVideoName(media.getVideoName()).join();
        assertNotNull(obtained);
        assertEquals(1, obtained.size());
        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findAllVideoSequenceNames() {
        var media = createRandomMedia();
        var obtained = mediaService.findAllVideoSequenceNames().join();
        assertNotNull(obtained);
        assertTrue(obtained.contains(media.getVideoSequenceName()));
    }

    @Test
    public void findByCameraIdAndTimestamp() {
        var media = createRandomMedia();
        var obtained = mediaService.findByCameraIdAndTimestamp(media.getCameraId(), media.getStartTimestamp()).join();
        assertNotNull(obtained);
        assertEquals(1, obtained.size());
        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findByVideoSequenceNameAndTimestamp() {
        // THis is not implemented in the server. We haven't used it!!!
//        var media = createRandomMedia();
//        var obtained = mediaService.findByVideoSequenceNameAndTimestamp(media.getVideoSequenceName(), media.getStartTimestamp()).join();
//        assertNotNull(obtained);
//        assertEquals(1, obtained.size());
//        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findByCameraIdAndDate() {
        var media = createRandomMedia();
        var t0 = media.getStartTimestamp();
        var t1 = t0.plusSeconds(1);
        var obtained = mediaService.findByCameraIdAndDate(media.getCameraId(), t0, t1).join();
        assertNotNull(obtained);
        assertEquals(1, obtained.size());
        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findConcurrentByVideoReferenceUuid() {
        var media = createRandomMedia();
        var obtained = mediaService.findConcurrentByVideoReferenceUuid(media.getVideoReferenceUuid()).join();
        assertNotNull(obtained);
        assertEquals(1, obtained.size());
        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findAllCameraIds() {
        var media = createRandomMedia();
        var obtained = mediaService.findAllCameraIds().join();
        assertNotNull(obtained);
        assertTrue(obtained.contains(media.getCameraId()));
    }


    @Test
    public void findVideoSequenceNamesByCameraId() {
        var media = createRandomMedia();
        var obtained = mediaService.findVideoSequenceNamesByCameraId(media.getCameraId()).join();
        assertNotNull(obtained);
        assertTrue(obtained.contains(media.getVideoSequenceName()));
    }

    @Test
    public void findVideoNamesByVideoSequenceName() {
        var media = createRandomMedia();
        var obtained = mediaService.findVideoNamesByVideoSequenceName(media.getVideoSequenceName()).join();
        assertNotNull(obtained);
        assertTrue(obtained.contains(media.getVideoName()));
    }

    @Test
    public void findByFilename() throws Exception {
        var media = createRandomMedia();
        var fileName = URLUtilities.toFilename(media.getUri().toURL());
        var obtained = mediaService.findByFilename(fileName).join();
        assertNotNull(obtained);
        assertEquals(1, obtained.size());
        AssertUtils.assertSameMedia(media, obtained.get(0), true);
    }

    @Test
    public void findAllURIs() {
        var media = createRandomMedia();
        var obtained = mediaService.findAllURIs().join();
        assertNotNull(obtained);
        assertTrue(obtained.contains(media.getUri()));
    }

    @Test
    public void findLastVideoSequenceUpdate() {
        var media = createRandomMedia();
        var obtained = mediaService.findLastVideoSequenceUpdate(media.getVideoSequenceUuid()).join();
        assertNotNull(obtained);
        System.out.println(obtained);
    }

    @Test
    public void findLastVideoUpdate() {
        var media = createRandomMedia();
        var obtained = mediaService.findLastVideoUpdate(media.getVideoUuid()).join();
        assertNotNull(obtained);
        System.out.println(obtained);
    }

    @Test
    public void findLastVideoReferenceUpdate() {
        var media = createRandomMedia();
        var obtained = mediaService.findLastVideoReferenceUpdate(media.getVideoReferenceUuid()).join();
        assertNotNull(obtained);
        System.out.println(obtained);
    }
}