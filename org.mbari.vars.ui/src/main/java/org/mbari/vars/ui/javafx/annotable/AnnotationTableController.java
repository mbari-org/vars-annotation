package org.mbari.vars.ui.javafx.annotable;

import javafx.application.Platform;
import javafx.scene.control.skin.TableViewSkin;
import javafx.scene.control.skin.VirtualFlow;
import io.reactivex.Observable;
import javafx.beans.binding.Bindings;
import javafx.collections.ObservableList;
import javafx.scene.control.*;
import org.mbari.vars.services.model.Media;
import org.mbari.vars.ui.Data;
import org.mbari.vars.core.EventBus;
import org.mbari.vars.ui.events.AnnotationsAddedEvent;
import org.mbari.vars.ui.events.AnnotationsChangedEvent;
import org.mbari.vars.ui.events.AnnotationsRemovedEvent;
import org.mbari.vars.ui.events.AnnotationsSelectedEvent;
import org.mbari.vars.ui.javafx.shared.TableViewExt;
import org.mbari.vars.ui.messages.SeekMsg;
import org.mbari.vars.ui.javafx.shared.AnnotationTableViewFactory;
import org.mbari.vars.ui.UIToolBox;
import org.mbari.vars.services.model.Annotation;
import org.mbari.vars.ui.util.JFXUtilities;
import org.mbari.vars.core.util.ListUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;
import java.util.List;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;
import java.util.stream.Collectors;

/**
 * @author Brian Schlining
 * @since 2017-05-10T10:04:00
 *
 * TODO all strings need to be put in i18n
 */
public class AnnotationTableController {

    private TableView<Annotation> tableView;
    private final ResourceBundle i18n;
    private final EventBus eventBus;
    private final Data data;
    private static final Logger log = LoggerFactory.getLogger(AnnotationTableController.class);


    public AnnotationTableController(UIToolBox toolBox) {
        this.i18n = toolBox.getI18nBundle();
        this.eventBus = toolBox.getEventBus();
        this.data = toolBox.getData();

        Observable<Object> observable = eventBus.toObserverable();

        observable.ofType(AnnotationsAddedEvent.class)
                .subscribe(e -> JFXUtilities.runOnFXThread(() -> {
                    var filtered = filterAnnotations(e.get());
                    getTableView().getItems().addAll(filtered);
                    getTableView().sort();
                }));

        observable.ofType(AnnotationsRemovedEvent.class)
                .subscribe(e -> JFXUtilities.runOnFXThread(() ->
                        getTableView().getItems().removeAll(e.get())));

        // Listen for external selection events, but ignore ones generated by this controlle
        observable.ofType(AnnotationsSelectedEvent.class)
                .filter(e -> e.getEventSource() != AnnotationTableController.this)
                .subscribe(e -> select(e.get()));

        observable.ofType(AnnotationsChangedEvent.class)
                .subscribe(e -> {
                    JFXUtilities.runOnFXThread(() -> {
                        Collection<Annotation> annotations = e.get();
                        ObservableList<Annotation> items = getTableView().getItems();
                        List<Annotation> intersection = ListUtils.intersection(annotations, items);
                        for (Annotation a : intersection) {
                            int idx = items.indexOf(a);
                            items.remove(idx); // FIXME Got a -1 in the bulk edito. Maybe getting this twice??
                            items.add(idx, a);
                        }
                        getTableView().refresh();
                        getTableView().sort();
                        eventBus.send(new AnnotationsSelectedEvent(intersection));
                    });
                });

        toolBox.getData()
                .showJsonAssociationsProperty()
                .addListener((obs, oldv, newv) -> tableView.refresh());

        toolBox.getData()
                .showCurrentGroupOnlyProperty()
                .addListener((obs, oldv, newv) -> {
                    var filteredAnnos = filterAnnotations(data.getAnnotations());
                    getTableView().getItems().setAll(filteredAnnos);
                });

        toolBox.getData()
                .groupProperty()
                .addListener((obs, oldv, newv) -> {
                    if (data.showCurrentGroupOnlyProperty().get()) {
                        var filteredAnnos = filterAnnotations(data.getAnnotations());
                        getTableView().getItems().setAll(filteredAnnos);
                    }
                });

        // Load the column visibility and width
        Preferences prefs = Preferences.userNodeForPackage(getClass());
        Preferences columnPrefs = prefs.node("table-columns");
        getTableView().getColumns()
                .forEach(tc -> {
                    Preferences p = columnPrefs.node(tc.getId());
                    String s = p.get("visible", "true");
                    boolean isVisible = s.equals("true");
                    String w = p.get("width", "100");
                    double width = Double.parseDouble(w);
                    JFXUtilities.runOnFXThread(() -> {
                        tc.setVisible(isVisible);
                        tc.setPrefWidth(width);
                    });
                });


        // Save column visibility and width
        Runtime.getRuntime()
                .addShutdownHook(new Thread(() -> {
                    getTableView().getColumns()
                            .forEach(tc -> {
                                Preferences p = columnPrefs.node(tc.getId());
                                p.put("visible", "false");
                                p.put("width", tc.getWidth() + "");
                            });
                    getTableView().getVisibleLeafColumns()
                            .forEach(tc -> {
                                Preferences p = columnPrefs.node(tc.getId());
                                p.put("visible", "true");
                            });
                }));

    }

    private Collection<Annotation> filterAnnotations(Collection<Annotation> annotations) {
        var currentGroupOnly = data.isShowCurrentGroupOnly();
        if (currentGroupOnly) {
            var currentGroup = data.getGroup();
            if (currentGroup != null) {
                return annotations.stream()
                        .filter(a -> a.getGroup() != null && a.getGroup().equalsIgnoreCase(currentGroup))
                        .collect(Collectors.toList());
            }
        }
        return annotations;
    }

    private void select(Collection<Annotation> annotations) {
        JFXUtilities.runOnFXThread(() -> {
            TableView.TableViewSelectionModel<Annotation> selectionModel = getTableView().getSelectionModel();
            selectionModel.clearSelection();
            if (!annotations.isEmpty()) {
                annotations.forEach(selectionModel::select);
                annotations.stream()
                        .findFirst()
                        .ifPresent(anno -> {
                            int i = tableView.getItems().indexOf(anno);
                            if (i >= 0) {
                                int[] visibleRows = getVisibleRows();
//                                log.atWarn().log("WANTED: " + i + ", VISIBLE: " + visibleRows[0] + " to " + visibleRows[1]);
                                if (i < visibleRows[0] || i > visibleRows[1]) {
                                    tableView.scrollTo(i);
//                                    Platform.runLater(() -> tableView.scrollTo(i));
                                }
                            }
                        });
            }
        });
    }


    public TableView<Annotation> getTableView() {
        if (tableView == null) {
            tableView = AnnotationTableViewFactory.newTableView(i18n);
//            tableView.getSelectionModel()
//                    .selectedItemProperty()
//                    .addListener((obs, oldv, newv) -> {
//                        if (newv != null && oldv != newv) {
////                            Platform.runLater(() -> tableView.scrollTo(newv));
//                            int i = tableView.getItems().indexOf(newv);
//                            if (i >= 0) {
//                                int[] visibleRows = getVisibleRows();
//                                log.atWarn().log("WANTED: " + i + ", VISIBLE: " + visibleRows[0] + " to " + visibleRows[1]);
//                                if (i < visibleRows[0] || i > visibleRows[1]) {
//                                    Platform.runLater(() -> tableView.scrollTo(i));
//                                }
//                            }
//                        }
//                    });

            TableView.TableViewSelectionModel<Annotation> selectionModel = tableView.getSelectionModel();
            selectionModel.setSelectionMode(SelectionMode.MULTIPLE);
            selectionModel.selectedItemProperty()
                    .addListener((obs, oldv, newv) -> {
                        eventBus.send(new AnnotationsSelectedEvent(AnnotationTableController.this,
                                selectionModel.getSelectedItems()));
                    });

            tableView.setRowFactory(param -> {
                TableRow<Annotation> row = new TableRow<>();
                ContextMenu menu = new ContextMenu();
                MenuItem seekItem = new MenuItem(i18n.getString("annotable.ctxmenu.seek"));
                seekItem.setOnAction(evt -> {
                    Media media = data.getMedia();
                    Annotation a = row.getItem();
                    SeekMsg.seek(media, a, eventBus);
                });
                menu.getItems().add(seekItem);

                // Set context menu on row, but use a binding to make it only show for non-empty rows:
                row.contextMenuProperty()
                        .bind(Bindings.when(row.emptyProperty())
                            .then((ContextMenu) null)
                            .otherwise(menu));
                return row;
            });



        }
        return tableView;
    }


    /**
     * THis is a total hack. We need it as scrollTo jumps the selected row to the top
     * of the table. Jarring if the row is already visible. As a workaround, we only
     * scroll if the row isn't already visible
     * @return A 2 element ray with the start and end index of visible rows
     */
    private int[] getVisibleRows() {
//        // See https://stackoverflow.com/questions/46474385/how-to-find-the-indices-of-the-visible-rows-in-a-tableview-in-javafx-9/46474693#46474693
        TableViewSkin<?> skin = (TableViewSkin<?>) tableView.getSkin();
        if (skin == null) return new int[] {0, 0};
        VirtualFlow<?> flow = (VirtualFlow<?>) skin.getChildren().get(1);
        int idxFirst;
        int idxLast;
        if (flow != null &&
                flow.getFirstVisibleCell() != null &&
                flow.getLastVisibleCell() != null) {
            idxFirst = flow.getFirstVisibleCell().getIndex();
            if (idxFirst > tableView.getItems().size()) {
                idxFirst = tableView.getItems().size() - 1;
            }
            idxLast = flow.getLastVisibleCell().getIndex();
            if (idxLast > tableView.getItems().size()) {
                idxLast = tableView.getItems().size() - 1;
            }
        }
        else {
            idxFirst = 0;
            idxLast = 0;
        }
        return new int[]{idxFirst, idxLast};

        // This TableViewExt appears to be buggy
//        return tableViewExt.getVisibleRows();
    }

}
