package org.mbari.vars.ui.swing.annotable;

import io.reactivex.rxjava3.core.Observable;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTableHeader;
import org.mbari.vars.core.util.ListUtils;
import org.mbari.vars.services.model.Annotation;
import org.mbari.vars.services.model.Media;
import org.mbari.vars.ui.Data;
import org.mbari.vars.ui.UIToolBox;
import org.mbari.vars.ui.events.AnnotationsAddedEvent;
import org.mbari.vars.ui.events.AnnotationsChangedEvent;
import org.mbari.vars.ui.events.AnnotationsRemovedEvent;
import org.mbari.vars.ui.events.AnnotationsSelectedEvent;
import org.mbari.vars.ui.messages.SeekMsg;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.util.ArrayList;
import java.util.Collection;

public class JXAnnotationTableController {

    private final UIToolBox toolBox;
    private final AnnotationTableModel tableModel;
    private JXTable table;
    private static final Logger log = LoggerFactory.getLogger(JXAnnotationTableController.class);


    public JXAnnotationTableController(UIToolBox toolBox) {
        this.toolBox = toolBox;
        this.tableModel = new AnnotationTableModel(toolBox.getI18nBundle());
    }

    private void init() {

        var observable = toolBox.getEventBus().toObserverable();
        observable.ofType(AnnotationsAddedEvent.class)
                .subscribe(e -> {
                    var filtered = filterAnnotations(e.get());
                    SwingUtilities.invokeLater(() -> tableModel.addAnnotations(filtered));
                });

        observable.ofType(AnnotationsRemovedEvent.class)
                .subscribe(e -> SwingUtilities.invokeLater(() ->
                        e.get().forEach(tableModel::removeAnnotation)));

        // Listen for external selection events, but ignore ones generated by this controlle
        observable.ofType(AnnotationsSelectedEvent.class)
                .filter(e -> e.getEventSource() != JXAnnotationTableController.this)
                .subscribe(e -> select(e.get()));

        observable.ofType(AnnotationsChangedEvent.class)
                .subscribe(e -> {
                    SwingUtilities.invokeLater(() -> {
                        Collection<Annotation> annotations = e.get();
                        annotations.forEach(tableModel::updateAnnotation);
                        toolBox.getEventBus()
                                .send(new AnnotationsSelectedEvent(JXAnnotationTableController.this, annotations));
                    });
                });

        toolBox.getData()
                .showJsonAssociationsProperty()
                .addListener((obs, oldv, newv) -> tableModel.fireTableDataChanged());

        toolBox.getData()
                .showCurrentGroupOnlyProperty()
                .addListener((obs, oldv, newv) -> {
                    var data = toolBox.getData();
                    var filteredAnnos = filterAnnotations(data.getAnnotations());
                    tableModel.clear();
                    tableModel.addAnnotations(filteredAnnos);
                });

        toolBox.getData()
                .groupProperty()
                .addListener((obs, oldv, newv) -> {
                    var data = toolBox.getData();
                    if (data.showCurrentGroupOnlyProperty().get()) {
                        var filteredAnnos = filterAnnotations(data.getAnnotations());
                        SwingUtilities.invokeLater(() -> {
                            tableModel.clear();
                            tableModel.addAnnotations(filteredAnnos);
                        });
                    }
                });

    }


    public JXTable getTable() {
        if (table == null) {
            var tableColumnModel = tableModel.getTableColumnModel();
            table = new JXTable(tableModel, tableColumnModel);

            var tableHeader = new JXTableHeader(tableColumnModel);
            tableHeader.setReorderingAllowed(true);
            tableHeader.setTable(table);
            tableHeader.setBackground(Colors.DEFAULT.getColor());
            tableHeader.setForeground(Colors.DEFAULT_TEXT.getColor());

            table.setTableHeader(tableHeader);
            table.setBackground(Colors.DEFAULT.getColor());
            var columnControl = table.getColumnControl();
            columnControl.setBackground(Colors.DEFAULT.getColor());
            columnControl.setForeground(Colors.DEFAULT_TEXT.getColor());
//            columnContol.getParent().setBackground(Colors.DEFAULT.getColor());

//            table.setAutoCreateColumnsFromModel(true);
            // DO NOT SET THE prefered size. It disables the scroll bars
//            table.setPreferredSize(new Dimension(800, 500));

            // Make the font a little larger
            var font = table.getFont();
            var newFont = font.deriveFont(font.getSize() * 1.1F);
            table.setFont(newFont);
            table.setSortable(true);
            table.setAutoscrolls(true);
            table.setColumnControlVisible(true);
            table.setShowGrid(false, true);
            table.setGridColor(Colors.DEFAULT_TEXT.getColor());
            table.setForeground(Colors.DEFAULT_TABLE_TEXT.getColor());
            table.setSelectionBackground(Colors.EMPHASIS.getColor());
            table.setSortOrder(0, SortOrder.ASCENDING); // default sort is recordedTimestamp

            // The row editor panel should get focus NOT the table
            table.setFocusable(false);
            table.getSelectionModel()
                    .setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            table.getSelectionModel()
                    .addListSelectionListener(e -> {
                        if (!e.getValueIsAdjusting()) {
                            int[] rows = table.getSelectedRows();
                            var selected = new ArrayList<Annotation>(rows.length);
                            for (int i = 0; i < rows.length; i++) {
                                selected.add(getAnnotationAt(rows[i]));
                            }
//                            log.atInfo().log("SELECTED " + selected.size() + " - " + selected.get(0).getConcept());
                            toolBox.getEventBus()
                                    .send(new AnnotationsSelectedEvent(JXAnnotationTableController.this, selected));
                        }
                    });

            // Add seek
            var tablePopupMenu = new JPopupMenu();
            tablePopupMenu.setBackground(Colors.DEFAULT.getColor());
            var seekText = toolBox.getI18nBundle().getString("annotable.ctxmenu.seek");
            var seekItem = new JMenuItem(seekText);
            seekItem.addActionListener(e -> {
                Data data = toolBox.getData();
                Media media = data.getMedia();
                var selectedAnnotations = data.getSelectedAnnotations();
                if (selectedAnnotations.size() == 1) {
                    var anno = selectedAnnotations.get(0);
                    SeekMsg.seek(media, anno, toolBox.getEventBus());
                }
            });
            seekItem.setForeground(Colors.ATTENTION.getColor());
            seekItem.setBackground(Colors.DEFAULT.getColor());
            tablePopupMenu.add(seekItem);
            var selected = toolBox.getData().getSelectedAnnotations();
            selected.addListener((ListChangeListener<Annotation>) c -> {
                if (selected.size() == 1) {
                    SwingUtilities.invokeLater(() -> seekItem.setEnabled(true));
                }
            });
            table.setComponentPopupMenu(tablePopupMenu);

            // TODO add context menu with seek
            init();
        }
        return table;
    }

    private Collection<Annotation> filterAnnotations(Collection<Annotation> annotations) {
        var data = toolBox.getData();
        var currentGroupOnly = data.isShowCurrentGroupOnly();
        if (currentGroupOnly) {
            var currentGroup = data.getGroup();
            if (currentGroup != null) {
                return annotations.stream()
                        .filter(a -> a.getGroup() != null && a.getGroup().equalsIgnoreCase(currentGroup))
                        .toList();
            }
        }
        return annotations;
    }

    private void select(Collection<Annotation> annotations) {
        SwingUtilities.invokeLater(() -> {
            ListSelectionModel selectionModel = getTable().getSelectionModel();
            selectionModel.setValueIsAdjusting(true);
            selectionModel.clearSelection();
            annotations.forEach(a -> {
                final var row = table.convertRowIndexToView(tableModel.getAnnotationRow(a));
                selectionModel.addSelectionInterval(row, row);
            });
            selectionModel.setValueIsAdjusting(false);

            int[] i = table.getSelectedRows();
            if (i != null && i.length > 0) {
                table.scrollRowToVisible(i[0]);
            }
        });

    }

    public Annotation getAnnotationAt(int row) {
        return tableModel.getAnnotationAt(getTable().convertRowIndexToModel(row));
    }
}
